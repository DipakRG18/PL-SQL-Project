

-- Step 1: Create the Database Schema
-- Drop tables if they already exist (optional cleanup for development)
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Bookings CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE Passengers CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE Trains CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE Stations CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE TrainSchedules CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE TicketPrices CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE PaymentRecords CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE TrainClasses CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE Reviews CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE Cancellations CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        NULL; -- Ignore errors during cleanup
END;
/

-- Create Stations Table
CREATE TABLE Stations (
    StationID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(100) NOT NULL,
    Location VARCHAR2(200) NOT NULL
);

-- Create Trains Table
CREATE TABLE Trains (
    TrainID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(100) NOT NULL,
    TrainType VARCHAR2(50) CHECK (TrainType IN ('Express', 'Passenger', 'Freight')),
    TotalSeats NUMBER NOT NULL
);

-- Create TrainClasses Table
CREATE TABLE TrainClasses (
    ClassID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TrainID NUMBER REFERENCES Trains(TrainID),
    Class VARCHAR2(50) CHECK (Class IN ('Sleeper', 'AC', 'General')),
    SeatsAvailable NUMBER NOT NULL
);

-- Create TrainSchedules Table
CREATE TABLE TrainSchedules (
    ScheduleID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TrainID NUMBER REFERENCES Trains(TrainID),
    DepartureStationID NUMBER REFERENCES Stations(StationID),
    ArrivalStationID NUMBER REFERENCES Stations(StationID),
    DepartureTime TIMESTAMP NOT NULL,
    ArrivalTime TIMESTAMP NOT NULL,
    DaysOfOperation VARCHAR2(100) NOT NULL -- e.g., 'Mon, Tue, Wed'
);

-- Create TicketPrices Table
CREATE TABLE TicketPrices (
    PriceID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TrainID NUMBER REFERENCES Trains(TrainID),
    Class VARCHAR2(50) CHECK (Class IN ('Sleeper', 'AC', 'General')),
    PricePerKm NUMBER(10, 2) NOT NULL
);

-- Create Passengers Table
CREATE TABLE Passengers (
    PassengerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(100) NOT NULL,
    Email VARCHAR2(100) UNIQUE NOT NULL,
    Phone VARCHAR2(15),
    Age NUMBER CHECK (Age > 0),
    Gender VARCHAR2(10) CHECK (Gender IN ('Male', 'Female', 'Other'))
);

-- Create Bookings Table
CREATE TABLE Bookings (
    BookingID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PassengerID NUMBER REFERENCES Passengers(PassengerID),
    ScheduleID NUMBER REFERENCES TrainSchedules(ScheduleID),
    BookingDate TIMESTAMP DEFAULT SYSTIMESTAMP,
    TravelDate DATE NOT NULL,
    Class VARCHAR2(50) CHECK (Class IN ('Sleeper', 'AC', 'General')),
    Fare NUMBER(10, 2) NOT NULL,
    Status VARCHAR2(50) DEFAULT 'Confirmed'
);

-- Create PaymentRecords Table
CREATE TABLE PaymentRecords (
    PaymentID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    BookingID NUMBER REFERENCES Bookings(BookingID),
    PaymentDate TIMESTAMP DEFAULT SYSTIMESTAMP,
    Amount NUMBER(10, 2) NOT NULL,
    PaymentMethod VARCHAR2(50) CHECK (PaymentMethod IN ('Credit Card', 'Debit Card', 'UPI', 'Net Banking')),
    Status VARCHAR2(50) DEFAULT 'Successful'
);

-- Create Reviews Table
CREATE TABLE Reviews (
    ReviewID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    BookingID NUMBER REFERENCES Bookings(BookingID),
    PassengerID NUMBER REFERENCES Passengers(PassengerID),
    Rating NUMBER CHECK (Rating BETWEEN 1 AND 5),
    Comments VARCHAR2(1000),
    ReviewDate TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- Create Cancellations Table
CREATE TABLE Cancellations (
    CancellationID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    BookingID NUMBER REFERENCES Bookings(BookingID),
    CancellationDate TIMESTAMP DEFAULT SYSTIMESTAMP,
    RefundAmount NUMBER(10, 2),
    Status VARCHAR2(50) DEFAULT 'Processed'
);

-- Step 2: Populate Sample Data
BEGIN
    -- Insert Stations
    INSERT INTO Stations (Name, Location) VALUES ('Central Station', 'City Center');
    INSERT INTO Stations (Name, Location) VALUES ('North Station', 'Northside');
    INSERT INTO Stations (Name, Location) VALUES ('South Station', 'Southside');

    -- Insert Trains
    INSERT INTO Trains (Name, TrainType, TotalSeats) VALUES ('InterCity Express', 'Express', 500);
    INSERT INTO Trains (Name, TrainType, TotalSeats) VALUES ('Local Passenger', 'Passenger', 300);

    -- Insert Train Classes
    INSERT INTO TrainClasses (TrainID, Class, SeatsAvailable) VALUES (1, 'Sleeper', 200);
    INSERT INTO TrainClasses (TrainID, Class, SeatsAvailable) VALUES (1, 'AC', 100);
    INSERT INTO TrainClasses (TrainID, Class, SeatsAvailable) VALUES (2, 'General', 300);

    -- Insert Train Schedules
    INSERT INTO TrainSchedules (TrainID, DepartureStationID, ArrivalStationID, DepartureTime, ArrivalTime, DaysOfOperation)
    VALUES (1, 1, 2, TIMESTAMP '2025-01-10 08:00:00', TIMESTAMP '2025-01-10 12:00:00', 'Mon, Wed, Fri');
    INSERT INTO TrainSchedules (TrainID, DepartureStationID, ArrivalStationID, DepartureTime, ArrivalTime, DaysOfOperation)
    VALUES (2, 2, 3, TIMESTAMP '2025-01-11 09:00:00', TIMESTAMP '2025-01-11 14:00:00', 'Tue, Thu, Sat');

    -- Insert Ticket Prices
    INSERT INTO TicketPrices (TrainID, Class, PricePerKm) VALUES (1, 'Sleeper', 1.5);
    INSERT INTO TicketPrices (TrainID, Class, PricePerKm) VALUES (1, 'AC', 3.0);
    INSERT INTO TicketPrices (TrainID, Class, PricePerKm) VALUES (2, 'General', 0.75);

    -- Insert Passengers
    INSERT INTO Passengers (Name, Email, Phone, Age, Gender) VALUES ('John Doe', 'john.doe@gmail.com', '1234567890', 30, 'Male');
    INSERT INTO Passengers (Name, Email, Phone, Age, Gender) VALUES ('Jane Smith', 'jane.smith@gmail.com', '9876543210', 25, 'Female');
END;
/

-- Step 3: Add PL/SQL Procedures
-- Procedure to Calculate Fare
CREATE OR REPLACE PROCEDURE CalculateFare (
    p_TrainID IN NUMBER,
    p_Class IN VARCHAR2,
    p_Distance IN NUMBER,
    o_Fare OUT NUMBER
) AS
    v_PricePerKm NUMBER;
BEGIN
    SELECT PricePerKm INTO v_PricePerKm
    FROM TicketPrices
    WHERE TrainID = p_TrainID AND Class = p_Class;

    o_Fare := p_Distance * v_PricePerKm;
END;
/

-- Procedure to Book a Ticket
CREATE OR REPLACE PROCEDURE BookTicket (
    p_PassengerID IN NUMBER,
    p_ScheduleID IN NUMBER,
    p_TravelDate IN DATE,
    p_Class IN VARCHAR2,
    p_Distance IN NUMBER
) AS
    v_Fare NUMBER;
    v_SeatsAvailable NUMBER;
    v_TrainID NUMBER;
BEGIN
    -- Get TrainID for the given ScheduleID
    SELECT TrainID INTO v_TrainID
    FROM TrainSchedules
    WHERE ScheduleID = p_ScheduleID;

    -- Check seat availability
    SELECT SeatsAvailable INTO v_SeatsAvailable
    FROM TrainClasses
    WHERE TrainID = v_TrainID AND Class = p_Class;

    IF v_SeatsAvailable <= 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No seats available in the selected class.');
    END IF;

    -- Calculate fare
    CalculateFare(v_TrainID, p_Class, p_Distance, v_Fare);

    -- Book the ticket
    INSERT INTO Bookings (PassengerID, ScheduleID, TravelDate, Class, Fare, Status)
    VALUES (p_PassengerID, p_ScheduleID, p_TravelDate, p_Class, v_Fare, 'Confirmed');

    -- Update the available seats
    UPDATE TrainClasses
    SET SeatsAvailable = SeatsAvailable - 1
    WHERE TrainID = v_TrainID AND Class = p_Class;

    -- Output the success message
    DBMS_OUTPUT.PUT_LINE('Ticket booked successfully!');

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Schedule ID not found or no seats available.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
  --Testing 
BEGIN
    -- Test Booking a Ticket
    BookTicket(1, 1, TO_DATE('2025-01-15', 'YYYY-MM-DD'), 'Sleeper', 1000); -- Example parameters
END;
/
